name: Security Testing Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-timeout coverage bandit safety
    
    - name: Run security utilities tests
      run: |
        python -m pytest tests/test_security_utils.py -v --tb=short
    
    - name: Run secure model tests
      run: |
        python -m pytest tests/test_secure_model.py -v --tb=short
    
    - name: Run comprehensive security tests
      run: |
        python -m pytest tests/test_security_comprehensive.py -v --tb=short
    
    - name: Run security test suite
      run: |
        python test_runner.py --security --verbose
    
    - name: Security vulnerability scan with Bandit
      run: |
        bandit -r security_utils.py secure_model.py -f json -o bandit-results.json
        bandit -r security_utils.py secure_model.py -f txt
      continue-on-error: true
    
    - name: Dependency security check with Safety
      run: |
        safety check --json --output safety-results.json
        safety check
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results-py${{ matrix.python-version }}
        path: |
          bandit-results.json
          safety-results.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: security-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest psutil
    
    - name: Run performance tests
      run: |
        python test_runner.py --performance --verbose
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: test_report_*.json

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit
    
    - name: Run Black formatter check
      run: |
        black --check --diff security_utils.py secure_model.py test_runner.py
    
    - name: Run import sorting check
      run: |
        isort --check-only --diff security_utils.py secure_model.py test_runner.py
    
    - name: Run Flake8 linter
      run: |
        flake8 security_utils.py secure_model.py test_runner.py
    
    - name: Run MyPy type checker
      run: |
        mypy security_utils.py secure_model.py --ignore-missing-imports
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: |
        bandit -r security_utils.py secure_model.py
      continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-tests, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage
    
    - name: Run full test suite with coverage
      run: |
        python test_runner.py --coverage --report --verbose
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage_html/
          test_report_*.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-tests, performance-tests, code-quality, integration-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create security summary
      run: |
        echo "# Security Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Security Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-tests.result }}" == "success" ] && [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "**SECURITY STATUS: PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "All security tests and code quality checks passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "**SECURITY STATUS: ATTENTION REQUIRED**" >> $GITHUB_STEP_SUMMARY
          echo "Some security tests or code quality checks failed. Please review." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed tests or security scans" >> $GITHUB_STEP_SUMMARY
        echo "- Update dependencies if security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure all security fixes are properly implemented" >> $GITHUB_STEP_SUMMARY