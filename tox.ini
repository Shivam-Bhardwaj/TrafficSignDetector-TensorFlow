[tox]
# Tox configuration for testing across multiple Python versions
envlist = py38, py39, py310, py311, security, performance, lint, coverage
isolated_build = true
skip_missing_interpreters = true

[testenv]
# Base test environment configuration
deps = 
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-timeout>=2.1.0
    pytest-xdist>=3.3.0
    numpy>=1.24.0
    joblib>=1.3.0
    # Optional dependencies for enhanced testing
    psutil>=5.9.0
    coverage>=7.0.0

commands = 
    pytest tests/ -v --timeout=300

[testenv:security]
# Security-focused testing environment
description = Run security tests only
deps = 
    {[testenv]deps}
commands = 
    python test_runner.py --security --verbose

[testenv:performance]
# Performance testing environment
description = Run performance and stress tests
deps = 
    {[testenv]deps}
commands = 
    python test_runner.py --performance --verbose

[testenv:fast]
# Fast testing environment (excludes slow tests)
description = Run fast tests only
deps = 
    {[testenv]deps}
commands = 
    python test_runner.py --fast --verbose

[testenv:coverage]
# Coverage testing environment
description = Run tests with coverage analysis
deps = 
    {[testenv]deps}
    coverage>=7.0.0
commands = 
    python test_runner.py --coverage --report --verbose

[testenv:lint]
# Code quality and linting environment
description = Run code quality checks
deps = 
    flake8>=6.0.0
    black>=23.7.0
    isort>=5.12.0
    mypy>=1.5.0
    bandit>=1.7.5
commands = 
    flake8 security_utils.py secure_model.py test_runner.py
    black --check security_utils.py secure_model.py test_runner.py
    isort --check-only security_utils.py secure_model.py test_runner.py
    mypy security_utils.py secure_model.py --ignore-missing-imports
    bandit -r security_utils.py secure_model.py -f json -o bandit-report.json

[testenv:security-scan]
# Security vulnerability scanning
description = Run security vulnerability scans
deps = 
    bandit>=1.7.5
    safety>=2.3.0
    semgrep>=1.0.0
commands = 
    bandit -r . -f json -o security-scan.json
    safety check --json --output safety-report.json
    # semgrep --config=auto --json -o semgrep-report.json .

[flake8]
# Flake8 configuration
max-line-length = 100
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
max-complexity = 12
per-file-ignores =
    tests/*:F401,F811  # Allow unused imports in tests

[coverage:run]
# Coverage configuration
source = .
omit = 
    tests/*
    test_*.py
    .tox/*
    .venv/*
    venv/*
    setup.py

[coverage:report]
# Coverage reporting configuration
exclude_lines = 
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
precision = 2
show_missing = true
skip_covered = false

[coverage:html]
directory = htmlcov

[isort]
# Import sorting configuration
profile = black
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true